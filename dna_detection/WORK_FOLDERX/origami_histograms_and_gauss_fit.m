%%Reads the EXP_NAME_data.mat file containing particle statistics from
%%imageJ and makes and saves histograms of the selected properties
% It also creates a selectedParticles.txt file containing for each
% temperature the number of the particles that have properties around the
% maximum of the histogram

clear all;
close all;
[dataFile dataFolder]= uigetfile(pwd, '.mat'); %'/Volumes/Data/Andre_sur_Meursault/Articles/2015/folding_origami/DATA/141118_Origami_Thermodynamics_70C-40C_ENS/spip_corrected/tiff';
tmpIndx = strfind(dataFile, '_'); %dataFile is the filename and hax the expression 'DATA_text.mat'
expDate = dataFile(1:tmpIndx(1));
variables = load( fullfile(dataFolder, dataFile) ); %loads data file generated by
tempVect = variables.tempVect;
tempLabel = variables.tempLabel;
selProp = variables.selProp;
resColLabel = variables.resColLabel;
res = variables.res;
pixel2nm = variables.pixel2nm;
dataColLabel = variables.dataColLabel;
%data = variables.data;
allProp = variables.allProp;
histoResults(1).x = [];  %x values for the histogram
histoResults(1).y = []; %y values for the histogram, normalize
histoResults(1).Prop = []; %property name of the histogram
histoResults(1).xUnit = []; %x unit for the histogram
nTemp = size(tempVect,2); %number of temperatures
histFolder = fullfile(dataFolder, 'histo');
if exist(histFolder, 'dir') ~= 7
    mkdir(histFolder)
end
facebookAlignDir = fullfile(dataFolder, 'facebook_registered'); %directory where particles facebooks are stored (previously aligned with image_registration.m

%%%%%%%%%%%%%%%%%%%%%%%
% Parameters than may need to be manually changed by the USER
%%%%%%%%%%%%%%%%%%%%%%%
%twoGaussRange = [1:3]; 
%oneGaussRange = [1:3];
twoGaussRange = [2:5, 7]; %UNFOLDING%data index (in temperature) where two gaussians should be fitted to mode histogram%
oneGaussRange = [1, 6, 8, 9];
%oneGaussRange = [1:3,7:12]; %FOLDING
%twoGaussRange = 4:6; %FOLDING
%for folding oneGaussRange = [1:(twoGaussRange(1)-1), (twoGaussRange(end)+1):size(tempVect, 2)];
particleSelectionInterval = 0.2; %interval around histogram maximum for a particle to be considered a good representative
%of this subpopulation
MAKE_HISTOGRAMS = 1; %0 or 1 to draw histograms or not
DRAW_MELTING = 1;
FIT_GAUSSIAN = 1;
fontSize = 18;
nBin = 60; %number of bins in histogram

%Parameters needed to save 32bit tiff images
tagstruct.Photometric     = Tiff.Photometric.MinIsBlack;
tagstruct.BitsPerSample   = 32;
%tagstruct.RowsPerStrip    = 1024;
tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
tagstruct.SampleFormat = 3;

%Recalculating histograms with imposed bins
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for iTemp = 1:nTemp
    selectedPart(iTemp).T = tempVect(iTemp);
    selectedPart(iTemp).selPartMedian = 0;
    selectedPart(iTemp).selPartFeret = 0;
end
iSelProp = 0;

res(nTemp).dataWithUnit = zeros(size(res(iTemp).data));
if MAKE_HISTOGRAMS
    for iProp=1:size(res(1).data,2)
        if size(res(1).data,2) ~=  size(resColLabel,2)
            error('size problem with labels');
        end
        
        %selecting the following variables to plot in histpgrams
        if(     strcmp(resColLabel{iProp}, 'Mode') ||...
                strcmp(resColLabel{iProp}, 'Feret') ||...
                strcmp(resColLabel{iProp}, 'Median')||...
                strcmp(resColLabel{iProp}, 'Solidity')||... %added 150714
                strcmp(resColLabel{iProp}, 'Area') ...
                )
            iSelProp = iSelProp + 1;
            
            if( strcmp(resColLabel{iProp}, 'Perim.') )
                unitCorr = pixel2nm;
                unit = 'nm';
            elseif( strcmp(resColLabel{iProp}, 'Area') )
                unitCorr = pixel2nm^2;
                unit = 'nm^2';
            elseif( strcmp(resColLabel{iProp}, 'Mean') )
                unitCorr = 1;
                unit = 'nm';
            elseif( strcmp(resColLabel{iProp}, 'Mode') )
                unitCorr = 1;
                unit = 'nm';
            elseif( strcmp(resColLabel{iProp}, 'Feret') )
                unitCorr = pixel2nm;
                unit = 'nm';
            elseif( strcmp(resColLabel{iProp}, 'Median') )
                unitCorr = 1;
                unit = 'nm';
            else
                unitCorr = 1;
                unit = '';
            end
            
            %calculate minimal and maximal values for each dataType i
            for iTemp = 1:nTemp
                tmp = res(iTemp).data(:, iProp)*unitCorr
                res(iTemp).dataWithUnit(:, iProp)= tmp;
                maxi(iTemp) = max(max( res(iTemp).dataWithUnit(:, iProp) ));
                mini(iTemp) = min(min( res(iTemp).dataWithUnit(:, iProp) ));
                totPart(iTemp) = size(res(iTemp).data(:, iProp), 1);
            end
            %Make bins for each temp between min and max
            
            xHistFixed = linspace(min(mini),max(maxi),nBin);
            xHist = zeros(nBin, nTemp);
            for iTemp = 1:nTemp
                xHist(:, iTemp) = linspace(mini(iTemp),maxi(iTemp),nBin)';
            end
            histYData = zeros(nBin,nTemp);
            histYDataNorm = zeros(nBin,nTemp);
            %Make histograms of each dataType and of each normalized dataType
            propertyMax = zeros(nTemp, 1);
            
            for iTemp = 1:nTemp
                res(iTemp).histYData = hist(res(iTemp).data(:, iProp)*unitCorr, xHistFixed);
                res(iTemp).histYDataNorm = res(iTemp).histYData./ size(res(iTemp).data,1);
                res(iTemp).histYDataXvariables = hist(res(iTemp).data(:, iProp)*unitCorr, xHist(:, iTemp)); %with xHist
                res(iTemp).histYDataNormXvariables = res(iTemp).histYDataXvariables./ size(res(iTemp).data,1);
                %%%%
                % Normalization of histograms
                %%%%%
                histYData(:, iTemp) = res(iTemp).histYData;
                histYDataNorm(:, iTemp) = res(iTemp).histYDataNorm;
                histYDataXvariables(:, iTemp) = res(iTemp).histYDataXvariables;
                histYDataNormXvariables(:, iTemp) = res(iTemp).histYDataNormXvariables;
                %histNmFixedNorm(:, iTemp) = partArea(iTemp).histNmFixedNorm;
                %Looking for the maximum in the histogram
                last = 0;
                %Choosing particle numbers close to the most freque value for median and feret
                if( strcmp(resColLabel{iProp}, 'Median') || strcmp(resColLabel{iProp}, 'Feret') )
                    fractionMax = max(histYData(:, iTemp)); %maximum of histogram
                    logIndex = ( histYData(:, iTemp) ==  fractionMax);
                    indexVect = [1:size( histYData(:, iTemp) )];
                    indexMax = indexVect(logIndex);%corresponding index
                    
                    propertyMax(iTemp) = xHistFixed(indexMax(1));
                    propData = res(iTemp).data(:, iProp)*unitCorr;
                    indexVect = [1:size(propData,1)];
                    if strcmp(resColLabel{iProp}, 'Median')
                        display('Median')
                        logIndex = ( 0.9*propertyMax(iTemp) < propData ).*( propData < 1.1*propertyMax(iTemp) );
                        selectedPart(iTemp).selPartMedian = indexVect(logical(logIndex));
                    elseif strcmp(resColLabel{iProp}, 'Feret')
                        display('Feret')
                        logIndex = ( 0.9*propertyMax(iTemp) < propData ).*( propData < 1.1*propertyMax(iTemp) );
                        selectedPart(iTemp).selPartFeret = indexVect(logical(logIndex));
                    end
                end
            end
            histoResults(iSelProp).x = xHistFixed';  %x values for the histogram
            histoResults(iSelProp).y = histYDataNorm; %y values for the histogram
            histoResults(iSelProp).Prop = resColLabel{iProp}; %property name of the histogram
            histoResults(iSelProp).xUnit = unit; %x unit for the histogram
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %Plotting and saving 2D offsetted histograms FIXED X
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            histYDataNormOffset = histYDataNorm + ( ones(size(histYDataNorm, 1),1)*linspace(0, 2, size(tempVect, 2)));
            plot_data(xHistFixed', histYDataNormOffset, 8);
            legend(tempLabel);
            forXabel = sprintf('%s (%s)', resColLabel{iProp}, unit);
            xlabel(forXabel)
            ylabel('Frequency')
            if(strcmp(resColLabel{iProp}, 'Feret'))
                set(gca, 'XLim', [90, 600]);
            end
            title(dataFile)
            fNameFig = sprintf('%s_%s_offset_hist.fig', expDate, resColLabel{iProp});
            fNamePng = sprintf('%s_%s_offset_hist.png', expDate, resColLabel{iProp});
            %fullPathFig = fullfile(filenameFig);
            saveas(gcf, fullfile(histFolder, fNameFig) );
            saveas(gcf, fullfile(histFolder, fNamePng) );
            close;
        end
    end
end

%%%%%%%%%%%%%%%%%
%Fitting gaussians to Modal distribution
%%%%%%%%%%%%%%%%%
if FIT_GAUSSIAN
    fit(1).oneGaussFits = [];
    fit(1).type = 'Mode';
    fit(2).type = 'Median';
    %oneGaussRange = [1:(twoGaussRange(1)-1), (twoGaussRange(end)+1):size(tempVect, 2)];
    tempRange = 1:size(tempVect, 2);
    totTemp = size(tempRange,2);
    x=linspace(0,1.5,nBin);
    for j = 1:2
        fit(j).oneGaussFits = zeros(60,totTemp);
        fit(j).twoGaussFits = zeros(60,totTemp);
        fit(j).histData = zeros(60,totTemp);
        fit(j).histDataNorm = zeros(60,totTemp);
        fit(j).twoGaussParams = zeros(5, totTemp); %amplitude, mean1, sigma1, mean2, sigma2
        fit(j).oneGaussParams = zeros(2, totTemp); %mean, sigma
        fit(j).modeOfMaxGaussian = NaN(nTemp, 2); %state1, state2
        for iProp=1:size(res(1).data,2)
            if( (strcmp(resColLabel{iProp}, 'Mode') && j == 1) || (strcmp(resColLabel{iProp}, 'Median') && j ==2) )
                for iTemp = tempRange
                    tmp = res(iTemp).data(:, iProp);
                    fit(j).histData(:, iTemp) = hist(res(iTemp).data(:, iProp), x);
                    fit(j).histDataNorm(:, iTemp) = fit(j).histData(:, iTemp)/ size(res(iTemp).data,1);
                    %Fitting with one gaussian
                    pd=fitdist(tmp,'normal'); %fitting a normal distribution to the data
                    fit(j).oneGaussParams(:, iTemp) = [mean(pd); sqrt(var(pd))];
                    PDF=pdf(pd,x);
                    PDF = PDF/sum(PDF);
                    fit(j).oneGaussFits(:, iTemp) = PDF;
                    %Fitting with two gaussians
                    %pd = fitdist(tmp,'Kernel','Kernel','normal')
                    pdf_normmixture = @(y,p,mu1,mu2,sigma1,sigma2) ...
                        p*normpdf(y,mu1,sigma1) + (1-p)*normpdf(y,mu2,sigma2);
                    pStart = .5;
                    muStart = quantile(tmp,[.25 .75]);
                    sigmaStart = sqrt(var(tmp) - .25*diff(muStart).^2);
                    if ~isreal(sigmaStart)
                        sigmaStart = 0.1*muStart(1);
                    end
                    start = [pStart muStart sigmaStart sigmaStart];
                    lb = [0 -Inf -Inf 0 0];
                    ub = [1 Inf Inf Inf Inf];
                    options = statset('MaxIter',1200, 'MaxFunEvals',2400); options.FunValCheck = 'off';
                    fit(j).twoGaussParams(:, iTemp) = mle(tmp, 'pdf',pdf_normmixture, 'start',start, ...
                        'lower',lb, 'upper',ub, 'options',options);
                    fit(j).twoGaussFits(:, iTemp) = pdf_normmixture(x,fit(j).twoGaussParams(1,iTemp),fit(j).twoGaussParams(2,iTemp),fit(j).twoGaussParams(3,iTemp),fit(j).twoGaussParams(4,iTemp),fit(j).twoGaussParams(5,iTemp));
                end
            end
        end
        %plot of histogram with gaussian fits
        shift = ones(size(fit(j).histDataNorm, 1),1)*linspace(0, 2, totTemp);
        plot_data(x,fit(j).histDataNorm(:, tempRange) + shift) %data
        hold on; plot(x, fit(j).oneGaussFits(:, oneGaussRange) + shift(:, oneGaussRange), '-b') %one gaussian
        hold on; plot(x, fit(j).twoGaussFits(:, twoGaussRange)/40 + shift(:, twoGaussRange), '-r') %two gaussians
        fNameFig = sprintf('%s_%s_offset_hist_gaussFit.fig', expDate, fit(j).type);
        fNamePng = sprintf('%s_%s_offset_hist_gaussFit.png', expDate, fit(j).type);
        %fullPathFig = fullfile(filenameFig);
        saveas(gcf, fullfile(histFolder, fNameFig) );
        saveas(gcf, fullfile(histFolder, fNamePng) );
        close;
        
        %keeping in a variable the average position of the double gaussian maximums
        state1Index = fit(j).oneGaussParams(1,oneGaussRange) > 0.5;
        fit(j).modeOfMaxGaussian(oneGaussRange(state1Index), 1) = ( fit(j).oneGaussParams(1,oneGaussRange(state1Index)) )';
        state2Index = fit(j).oneGaussParams(1,oneGaussRange) < 0.5;
        fit(j).modeOfMaxGaussian(oneGaussRange(state2Index), 2) = ( fit(j).oneGaussParams(1,oneGaussRange(state2Index)) )';
        fit(j).modeOfMaxGaussian(twoGaussRange, :) = [(fit(j).twoGaussParams(3,twoGaussRange))', (fit(j).twoGaussParams(2,twoGaussRange))'];
    end
end





%Choosing particle numbers close to the most frequent value for mode
for iProp=1:size(res(1).data,2)
    if( strcmp(resColLabel{iProp}, 'Mode') || strcmp(resColLabel{iProp}, 'Median'))
        if( strcmp(resColLabel{iProp}, 'Mode'))
            j = 1; %mode
        else
            j = 2; %median
        end
        modeProp = iProp;
        for iTemp = tempRange
            propData = res(iTemp).data(:, iProp);
            indexVect = [1:size(propData,1)];
            indx = 1;
            lowBound = 1 - particleSelectionInterval;
            highBound = 1 + particleSelectionInterval;
            if ~isnan(fit(j).modeOfMaxGaussian(iTemp, indx))
                logIndex = ( lowBound*fit(j).modeOfMaxGaussian(iTemp, indx) < propData ).*( propData < highBound*fit(j).modeOfMaxGaussian(iTemp, indx) );
                if strcmp(fit(j).type, 'Mode')
                    selectedPart(iTemp).selPartMode1 = indexVect(logical(logIndex));
                elseif strcmp(fit(j).type, 'Median')
                    selectedPart(iTemp).selPartMedian1 = indexVect(logical(logIndex));
                end
            end
            indx = 2;
            if ~isnan(fit(j).modeOfMaxGaussian(iTemp, indx))
                logIndex = ( lowBound*fit(j).modeOfMaxGaussian(iTemp, indx) < propData ).*( propData < highBound*fit(j).modeOfMaxGaussian(iTemp, indx) );
                if strcmp(fit(j).type, 'Mode')
                    selectedPart(iTemp).selPartMode2 = indexVect(logical(logIndex));
                elseif strcmp(fit(j).type, 'Median')
                    selectedPart(iTemp).selPartMedian2 = indexVect(logical(logIndex));
                end
            end
        end
    end
end

%Put selectd particles in a given folder
for k = 1:2
    if k == 1
        facebookAlignSelDir = fullfile(dataFolder, 'facebook_selected_mode'); %directory where selected particles will be stored
    elseif k == 2
        facebookAlignSelDir = fullfile(dataFolder, 'facebook_selected_median'); %directory where selected particles will be stored
    end
    if exist(facebookAlignSelDir, 'dir') ~= 7
        mkdir(facebookAlignSelDir)
    end
    
    cd(facebookAlignDir)
    fullFileInfo = dir(); %struct array with file name and info
    nFolders = length(fullFileInfo); %number of files
    iTemp = 0;
    nPathways = 9; %number of particles to illustrate folding pathways
    iPathway = zeros(nTemp, 2);
    for i = 1: nFolders
        if strfind(fullFileInfo(i).name, 'C_')
            iTemp = iTemp +1;
            if k == 1
                selPartState1 = selectedPart(iTemp).selPartMode1;
                selPartState2 = selectedPart(iTemp).selPartMode2;
            elseif k ==2
                selPartState1 = selectedPart(iTemp).selPartMedian1;
                selPartState2 = selectedPart(iTemp).selPartMedian2;
            end
            
            inDir = fullfile(facebookAlignDir, fullFileInfo(i).name);
            outDir = fullfile(facebookAlignSelDir, fullFileInfo(i).name);
            pathwayDir = fullfile(facebookAlignSelDir, 'pathways');
            if ~isdir(outDir)
                mkdir(outDir);
            end
            if ~isdir(pathwayDir)
                mkdir(pathwayDir);
            end
            cd(inDir);
            inDirInfo = dir('*.tif');
            nFiles = length(inDirInfo);
            for j = 1:nFiles
                if max(j == selPartState1)
                    iPathway(iTemp, 1) = iPathway(iTemp, 1) +1;
                    outDir2 = fullfile(outDir, 'state1');
                    if ~isdir(outDir2)
                        mkdir(outDir2);
                    end
                    source = fullfile(inDir, inDirInfo(j).name);
                    dest = fullfile(outDir2, inDirInfo(j).name);
                    im = imread(source);
                    imInfo = imfinfo(source);
                    wIm = imInfo.Width; hIm = imInfo.Height;
                    %uncomment the following 4 lines to get the mode of the particle printed in the image
                    %                 modeLabel = sprintf('mode=%0.3f', res(iTemp).data(j, modeProp));
                    %                 im = [im; zeros(20, size(im,2))];
                    %                 pos = [0, size(im,1)];
                    %                 im = insertText(im,pos,modeLabel,'AnchorPoint','LeftBottom', 'TextColor', 'white', 'FontSize', 10, 'BoxColor', 'black');
                    %save selected labeled image
                    t = Tiff(dest,'w');
                    tagstruct.ImageLength     = size(im,1);
                    tagstruct.ImageWidth      = wIm;
                    tagstruct.SamplesPerPixel = 1;
                    t.setTag(tagstruct);
                    t.write(im(:,:,1)); %the image is RGB, I only save one color
                    t.close();
                    %save pathway
                    if iPathway(iTemp, 1) < 10
                        thisPathwayDir = fullfile(pathwayDir, ['0', num2str(iPathway(iTemp, 1))]);
                        if ~isdir(thisPathwayDir)
                            mkdir(thisPathwayDir);
                        end
                        thisPathwayDir1 = fullfile(thisPathwayDir, 'state1');
                        if ~isdir(thisPathwayDir1)
                            mkdir(thisPathwayDir1);
                        end
                        dest = fullfile(thisPathwayDir1, inDirInfo(j).name);
                        t = Tiff(dest,'w');
                        tagstruct.ImageLength     = size(im,1);
                        tagstruct.ImageWidth      = wIm;
                        tagstruct.SamplesPerPixel = 1;
                        t.setTag(tagstruct);
                        t.write(im(:,:,1)); %the image is RGB, I only save one color
                        t.close();
                    end
                end
                if max(j == selPartState2)
                    iPathway(iTemp, 2) = iPathway(iTemp, 2) +1;
                    outDir2 = fullfile(outDir, 'state2');
                    if ~isdir(outDir2)
                        mkdir(outDir2);
                    end
                    source = fullfile(inDir, inDirInfo(j).name);
                    dest = fullfile(outDir2, inDirInfo(j).name);
                    im = imread(source);
                    imInfo = imfinfo(source);
                    wIm = imInfo.Width; hIm = imInfo.Height;
                    %                 %uncomment the following 4 lines to get the mode of the particle printed in the image
                    %                 modeLabel = sprintf('mode=%0.3f', res(iTemp).data(j, modeProp));
                    %                 im = [im; zeros(20, size(im,2))];
                    %                 pos = [0, size(im,1)];
                    %                 im = insertText(im,pos,modeLabel,'AnchorPoint','LeftBottom', 'TextColor', 'white', 'FontSize', 10, 'BoxColor', 'black');
                    %save selected labeled image
                    t = Tiff(dest,'w');
                    tagstruct.ImageLength     = size(im,1);
                    tagstruct.ImageWidth      = wIm;
                    tagstruct.SamplesPerPixel = 1;
                    t.setTag(tagstruct);
                    t.write(im(:,:,1)); %the image is RGB, I only save one color
                    t.close();
                    %save pathway
                    if iPathway(iTemp, 2) < 10
                        thisPathwayDir = fullfile(pathwayDir, ['0', num2str(iPathway(iTemp, 2))]);
                        if ~isdir(thisPathwayDir)
                            mkdir(thisPathwayDir);
                        end
                        thisPathwayDir2 = fullfile(thisPathwayDir, 'state2');
                        if ~isdir(thisPathwayDir2)
                            mkdir(thisPathwayDir2);
                        end
                        dest = fullfile(thisPathwayDir2, inDirInfo(j).name);
                        t = Tiff(dest,'w');
                        tagstruct.ImageLength     = size(im,1);
                        tagstruct.ImageWidth      = wIm;
                        tagstruct.SamplesPerPixel = 1;
                        t.setTag(tagstruct);
                        t.write(im(:,:,1)); %the image is RGB, I only save one color
                        t.close();
                    end
                end
            end
        end
    end
end

%melting curve of the mean of the gaussian fit vs T
save(fullfile(histFolder,'gauss_params.mat'), 'tempVect', 'fit', 'histoResults', 'totPart');
if DRAW_MELTING
    for j = 1:2
        figure;
        errorbar(tempVect(tempRange)', fit(j).twoGaussParams(2,:), fit(j).twoGaussParams(4,:)); %two gaussians state 1
        hold on; errorbar(tempVect(tempRange)', fit(j).twoGaussParams(3,:), fit(j).twoGaussParams(5,:)) % two gaussianS state 2
        hold on; plot(tempVect(tempRange)', fit(j).oneGaussParams(1,:),'-or') %one gaussian
        xlabel('Temperature (C)');
        ylabel('Mode (nm)');
        fNameFig = sprintf('%s_%s_melting.fig', expDate, fit(j).type);
        fNamePng = sprintf('%s_%s_melting.png', expDate, fit(j).type);
        %fullPathFig = fullfile(filenameFig);
        saveas(gcf, fullfile(histFolder, fNameFig) );
        saveas(gcf, fullfile(histFolder, fNamePng) );
        close;
    end
end

% fid = fopen( fullfile(histFolder,'selectedParticles.txt'), 'w');
% for iTemp = 1:nTemp
%     fprintf(fid, 'T = %d\n', selectedPart(iTemp).T);
%     fprintf(fid, 'Median selected:');
%     fprintf(fid, ' %d,', selectedPart(iTemp).selPartMedian);
%     fprintf(fid, '\n');
%     fprintf(fid, 'Feret selected:');
%     fprintf(fid, '%d,', selectedPart(iTemp).selPartFeret);
%     fprintf(fid, '\n');
%     fprintf(fid, 'Feret AND Median selected:');
%     fprintf(fid, '%d,', intersect(selectedPart(iTemp).selPartFeret, selectedPart(iTemp).selPartMedian) );
%     fprintf(fid, '\n');
%     fprintf(fid, '\n');
% end
% fclose(fid);

cd(dataFolder);
